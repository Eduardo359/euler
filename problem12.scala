/**
 * @author ananthakumaran
 **/

object Problem {
		/**
		 * The sequence of triangle numbers is generated by adding the natural numbers.
		 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
		 *	
		 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
		 *
		 * Let us list the factors of the first seven triangle numbers:
		 *	
		 * 1: 1
		 * 3: 1,3
		 * 6: 1,2,3,6
		 * 10: 1,2,5,10
		 * 15: 1,3,5,15
		 * 21: 1,3,7,21
		 * 28: 1,2,4,7,14,28
		 * We can see that 28 is the first triangle number to have over five divisors.
		 *
		 * What is the value of the first triangle number to have over five hundred divisors?
	     *
		 **/
	
		var prime:Array[Int] = null 
	
		def maxDiv(limit:Int) = {
			prime = generatePrime(Math.pow(limit,2).toInt)
		    var i = limit
			var divisors = 0
			while( divisors <= limit){
				i+=1
				divisors = factors(triangleSeq(i))
			}
			triangleSeq(i)
		}
		def triangleSeq(n:Double) = (n*(n+1))/2
		def generatePrime(limit:Int) = {
			var temp = new Array[Int](limit)
			var count = 0
			var i = BigInt(2)
			while(count < limit)
			{
				if(i.isProbablePrime(5))
			    {
					temp(count) = i.toInt
					count += 1
				}
				i+=1
			}
			temp
		}
		def factors(number:Double) = {
		
			var result = 1
			var i = 0
			var n = number
			
			while(n > 1)
			{
				var temp = 1
				if(n%prime(i)==0)
				{
					while( n % prime(i) == 0)
					{
						n = n / prime(i)
						temp += 1
					}
					result *= temp
				}
				else 
				{
					i += 1
				}
			}
			result
		}
}

assert(Problem.maxDiv(5) == 28)
assert(Problem.maxDiv(500) == 76576500)
